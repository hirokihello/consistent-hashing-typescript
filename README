# what it is

ketama の ts 実装です。

このREADME では、ketama の実装と consistentent hashing について解説をしていきます

# ketama の実装
## ketama とは
>We wrote ketama to replace how our memcached clients mapped keys to servers.

https://github.com/RJ/ketama より引用

記述されている内容としては、ketama は memcached の client の選択をするためのライブラリである。

その処理方法について確認してみる。
> * Take your list of servers (eg: 1.2.3.4:11211, 5.6.7.8:11211, 9.8.7.6:11211)
> * Hash each server string to several (100-200) unsigned ints
> * Conceptually, these numbers are placed on a circle called the continuum. (imagine a clock face that goes from 0 to 2^32)
> * Each number links to the server it was hashed from, so servers appear at several points on the continuum, by each of the numbers they hashed to.
> * To map a key->server, hash your key to a single unsigned int, and find the next biggest number on the continuum. The server linked to that number is the correct server for that key.
> * If you hash your key to a value near 2^32 and there are no points on the continuum greater than your hash, return the first server in the continuum.

記述内容を日本語にすると下記となる。
- 接続先のサーバーのリストを受け取る。(eg: 1.2.3.4:11211, 5.6.7.8:11211, 9.8.7.6:11211)
- それぞれのサーバーの文字列をハッシュ化して、100-200 個の unsigned int に変換する。
- それらの生成された数値というのは、「連続体」と呼ばれる円上に位置づけられる。
- （生成され「連続体」の円上に配置された）それぞれ数値は、その数値が生成される元となったサーバーと接続されている。そのため、「連続体」上には(リストとして渡された)サーバーがそのハッシュ値のたびに現れる。
- (保存したい情報の key とその value について) key と(保存されている)サーバーを紐づけるために、（保存したい情報の）key を unsigned int に変換して、(変換後の数値の)次に大きい数値を「連続体」上から発見する。(連続体上で発見された)その数値に紐づくサーバーがその key を保存する正しいサーバーとなる。
- 仮に保存したい情報の key を 2^32 に近い数値に変換してしまい、「連続体」上にそのハッシュ化した数値以上の数値が存在しない場合、「連続体」に存在する最初の server を返却する。

ここでわかるのは、ketama 単体では key とその保存するべきサーバーを示すところまでが責務ということである。

ketama について、再度処理の手順とやっていることをまとめる。

1. 「連続体」を作り、サーバーを配置する
2. 保存したいデータの key をハッシュ化して、「連続体」でそのハッシュの次に大きい数値の要素を発見して紐づくサーバーを返却する

やっていることはこの二つである。

それぞれ詳細を噛み砕いて説明する
## 1. 「連続体」を作り、サーバーを配置する
```sample.txt
1.1.1.1:5000 1
2.2.2.2:2222 2
8.8.8.8:53 5
```
ketama では二つの要素をもとにサーバーの数を増やす。
一つ目は weight(original のサンプルでは memory として命名されている) であり、サーバーごとに weight を横に記述することでその weight 数分要素を増やす。
二つ目は multiple point であり、これはそれぞれのサーバーの要素を等しく等倍する数値である。これはオリジナルの ketama では存在しないようであるが、他の実装では割とみられるので記述している。

このサンプルを読み取ると、ketama は内部的に下記のような情報を保持する。ここで、保持の仕方やオブジェクトのデザインは実装に依存するため、ketame として実現したいことのサンプルとして考えてほしい。

```
[
  { value: "8.8.8.8:53", hash: "13af72da841730074a2d03094e2ca532" },
  { value: "8.8.8.8:53", hash: "1c2a6742d84ccfc75566a63f8c3a57a7" },
  { value: "1.1.1.1:5000", hash: "1de817751a5a4013a995626622a236f6" },
  { value: "8.8.8.8:53", hash: "1f0711cb0c3d7e74dcddd8c315be9f7c" },
  { value: "8.8.8.8:53", hash: "2ff1fa1080faf0d06bd52f21fafdc39b" },
  { value: "2.2.2.2:2222", hash: "31456b8148ff35e95828c8cf1af92221" },
  { value: "8.8.8.8:53", hash: "350d631c24d370ce44bd096c36d99e35" },
  { value: "2.2.2.2:2222", hash: "39ffd5eeed14683ed7d0a52a99ff406d" },
  { value: "2.2.2.2:2222", hash: "3f7def28189aa0fc96b391b31fe4e4c6" },
  { value: "8.8.8.8:53", hash: "63ade8d8bf86c24afac543d79b5ea8b3" },
  { value: "2.2.2.2:2222", hash: "682f5d439d6278e81fc657e38eb1724a" },
  { value: "8.8.8.8:53", hash: "a3c9ab686bea072d1ce50630fc5ae9a7" },
  { value: "8.8.8.8:53", hash: "ad7239e2982f85eb35ed2d09f3577901" },
  { value: "1.1.1.1:5000", hash: "bf13b829d94bc4159170c7b345688e28" },
  { value: "8.8.8.8:53", hash: "ca83e9697c78af4a25d8525e14cef1eb" },
  { value: "8.8.8.8:53", hash: "f0b94d69aba8969c55976779bf16199a" }
]
```

今回の実装では MD5 を使用して生成されたハッシュと、それに紐づくサーバーの情報がセットとなっている。(オリジナルの ketama ではハッシュ関数として MD5 を使用)
生成したハッシュが一覧となって比較できるようになってあること、そしてそれぞれのハッシュ値がどのサーバーを示すのかの対応が取れて入れれば、この形式でなくとも良い。


> - 接続先のサーバーのリストを受け取る。(eg: 1.2.3.4:11211, 5.6.7.8:11211, 9.8.7.6:11211)
> - それぞれのサーバーの文字列をハッシュ化して、100-200 個の unsigned int に変換する。
> - それらの生成された数値というのは、「連続体」と呼ばれる円上に位置づけられる。
> - （生成され「連続体」の円上に配置された）それぞれ数値は、その数値が生成される元となったサーバーと接続されている。そのため、「連続体」上には(リストとして渡された)サーバーがそのハッシュ値のたびに現れる。


上記については、これで達成できた。(100-200 というのは weight に依存するため、今回は無視。また等倍すればいい話である。)

## 2. 保存したいデータの key をハッシュ化して、「連続体」でそのハッシュの次に大きい数値の要素を発見して紐づくサーバーを返却する
ここから ketama が "aaa" という key を突っ込むサーバーをどのように選ぶのかについて説明する。

MD5 ハッシュを用いて乱数を生成すると、 2 ^ 128 以下の何らかの数値となる。

"aaa" という文字列を MD5 を使ってハッシュを生成してみると、"47bce5c74f589f4867dbd57e9ca9f808" となる。

ここで、作成したサーバー一覧と今生成したハッシュについて、ハッシュの数値の順番で並べてみる。
```
# 小さい
[
  { value: "8.8.8.8:53", hash: "13af72da841730074a2d03094e2ca532" },
  { value: "8.8.8.8:53", hash: "1c2a6742d84ccfc75566a63f8c3a57a7" },
  { value: "1.1.1.1:5000", hash: "1de817751a5a4013a995626622a236f6" },
  { value: "8.8.8.8:53", hash: "1f0711cb0c3d7e74dcddd8c315be9f7c" },
  { value: "8.8.8.8:53", hash: "2ff1fa1080faf0d06bd52f21fafdc39b" },
  { value: "2.2.2.2:2222", hash: "31456b8148ff35e95828c8cf1af92221" },
  { value: "8.8.8.8:53", hash: "350d631c24d370ce44bd096c36d99e35" },
  { value: "2.2.2.2:2222", hash: "39ffd5eeed14683ed7d0a52a99ff406d" },
  { value: "2.2.2.2:2222", hash: "3f7def28189aa0fc96b391b31fe4e4c6" },
  { value: "aaa", hash: "47bce5c74f589f4867dbd57e9ca9f808"}             # 今生成した "aaa" という要素
  { value: "8.8.8.8:53", hash: "63ade8d8bf86c24afac543d79b5ea8b3" },    # 一つ大きいハッシュの数値
  { value: "2.2.2.2:2222", hash: "682f5d439d6278e81fc657e38eb1724a" },
  { value: "8.8.8.8:53", hash: "a3c9ab686bea072d1ce50630fc5ae9a7" },
  { value: "8.8.8.8:53", hash: "ad7239e2982f85eb35ed2d09f3577901" },
  { value: "1.1.1.1:5000", hash: "bf13b829d94bc4159170c7b345688e28" },
  { value: "8.8.8.8:53", hash: "ca83e9697c78af4a25d8525e14cef1eb" },
  { value: "8.8.8.8:53", hash: "f0b94d69aba8969c55976779bf16199a" }
]
# 大きい
```

ここで "aaa" をハッシュ化した数値"47bce5c74f589f4867dbd57e9ca9f808" の次に大きいハッシュである"63ade8d8bf86c24afac543d79b5ea8b3"を持つのは `{ value: "8.8.8.8:53", hash: "63ade8d8bf86c24afac543d79b5ea8b3" }` の一つ前に位置するハッシュを生成することがわかる。
そのため、"8.8.8.8:53" が代入するべきサーバーとして選んで、ketama は返却する。


> - (保存したい情報の key とその value について) key と(保存されている)サーバーを紐づけるために、（保存したい情報の）key を unsigned int に変換して、(変換後の数値の)次に大きい数値を「連続体」上から発見する。(連続体上で発見された)その数値に紐づくサーバーがその key を保存する正しいサーバーとなる。
> - 仮に保存したい情報の key を 2^32 に近い数値に変換してしまい、「連続体」上にそのハッシュ化した数値以上の数値が存在しない場合、「連続体」に存在する最初の server を返却する。

これは、このロジックで達成される。

これが ketama のロジックである。

# consistent hashing とは

consistent hashing とは、hash 方法の一つである。
この方法を使用すると、Kをキーの数、nをスロット数とすると、平均 K / n 個のキーのマッピングの変更のみでハッシュテーブルの機能を提供することのできる hash 方法。

あくまで hash 方法となる。

## 登場人物
- slot
  - hash の返り値を格納するもの
- key
  - hash の計算をする key

## 具体的なロジック

まず一般的な話をする。

hash テーブルの作り方として、ある key を入れると何らかの処理に従って処理が行われ、スロットが指定される。
そのスロットの中にデータが格納される。

ここで、user が 10 人いて、それぞれ 1,2,3,...10 まで user id を振られている事を考える。

そしてスロットが4つの場合を考える。

ここで slot に id を 0,1,2,3 と割り当てていると考える。

このスロットに平等に分布したい時にナイーブな方法として、 mod を取る方法が存在する。

この方法は、key に対してスロットの数 = 4 で mod をとり、その計算 = hash 化した値で slot を算出するというものである。

ここでユーザーとスロットの対応関係はそれぞれ
user 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
slot 1, 2, 3, 0, 1, 2, 3, 0, 1, 2

このように対応づけられる。

user の id が 5 の場合、どのスロットに紐づくかというと、id mod 4 を取ればよく、つまり 5 mod 4 = 1 となり、slot 1 が id 5 に割り当てられる。

ここで slot の数を一つ増やす事を考える。
そうすると、slot は 4 -> 5 となる。
ユーザー数は 10 のままである。

ユーザーとスロットの対応関係は下記のようになる
user 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
slot 1, 2, 3, 4, 0, 1, 2, 3, 4, 0

ここで注目してほしいのは、5 ~ 以降の全ての対応づけが変わってしまっている事である。
ここで、user 数の k が十分に slot 数の n よりも大きい時、 追加するたびに k 個の対応づけが変わってしまうことがわかるだろう。

スロットを削除する場合も同様である。
ここで slot の数を一つ減らす事を考える。
そうすると、slot は 4 -> 3 となる。
ユーザー数は 10 のままである。

ユーザーとスロットの対応関係は下記のようになる
user 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
slot 1, 2, 0, 1, 2, 0, 1, 2, 0, 1

元々の対応関係はこのようであった。
user 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
slot 1, 2, 3, 0, 1, 2, 3, 0, 1, 2

こちらも同様に、4 以上の user id = hash 関数の key は全てスロットの対応が変わってしまった。
ここで注目してほしいのは、4 ~ 以降の全ての対応づけが変わってしまっている事である。

つまりスロットの増減のたびに、key の数を k とすると O(k) だけ変更が走ってしまう。

ここでこのスロットの増減に対して、計算量を減らすことができるのが consistent hashing 法である。
